---
# This is the format for each lawyer entry in the final table
template: FLPN2_lawyerlist[i]['display_record']
# BE CAREFUL OF LINE BREAKS HERE, messes up the weird proprietary docassemble table syntax, use <br> to make newlines instead.
# With that said, sorry for absolutely awful readability
content: |
    <div class='box'><div class='lawyer'>[${ FLPN2_lawyerlist[i].item('lawyer') }]( ${ FLPN2_lawyerlist[i].item('website') }) </div> [FILE line.png] <br> <div class='lawresults'> :house: ${ FLPN2_lawyerlist[i].item('law_firm') } <br> :phone: ${ FLPN2_lawyerlist[i].item('hyperlinkForPhone') } <br> :email: ${ FLPN2_lawyerlist[i].item('hyperlinkForEmail') } <br> :addy: ${ FLPN2_lawyerlist[i].item('address') } <br> <br> ** Experience ** <br> ${ formatListIntoHTML(FLPN2_lawyerlist[i]['experience']) } <br> ** Fee Information ** <br> ${ formatListIntoHTML(FLPN2_lawyerlist[i]['fees']) } <br> </div></div>
---
objects:
  - FLPNeligibleEntries: DAList.using(there_are_any=True, auto_gather=False,gathered=False)
  - endpoints: DADict
---
# This is the code drives the app
mandatory: True
code: |
  # use safe method otherwise purging index while in for loop can be inconsistent
  def purgeIneligible():
    while(any(d['eligible'] == False for d in FLPNeligibleEntries)):
      for i,entry in enumerate(FLPNeligibleEntries):
        if entry['eligible'] == False:
            FLPNeligibleEntries.pop(i)
            break

  
  for entry in FLPN2_lawyerlist:
    # add hyperlink markdown to all entries (for docx template)
    entry["hyperlinkForName"] = "[{}]({})".format(entry['law_firm'], entry['website'])
    entry["hyperlinkForURL"] = "[{}]({})".format(entry['website'], entry['website'])
    entry["hyperlinkForEmail"] = "[{}](mailto:{})".format(entry['email'], entry['email'])
    entry["hyperlinkForPhone"] = "[{}](tel:{})".format(entry['phone'], entry['phone'])
  
    # set all entries to eligible by default
    entry["eligible"] = True
  
  # make empty DAlist
  FLPNeligibleEntries.clear()
  for entry in FLPN2_lawyerlist:
    FLPNeligibleEntries.append(entry)
  
  for entry in FLPN2_lawyerlist:
    # Check whether user selected service area that this lawyer candidate services
    inAnyFlag = False
    for region, trueFalse in FLPNregion.items():
      # FLPNregion formatted like: {"1": True, "2": False, "3":True, etc}, so need to check if flag is set for each one
      if(trueFalse == True and (int(region) in entry.item("service_area"))):
        inAnyFlag = True
    # if none of the specified regions match what the lawyer services, set uneligible
    if inAnyFlag == False:
      entry["eligible"] = False
  
  # remove entires flagged as "eligible"=false (after region selected)
  purgeIneligible()
  
  # use variable to determine if process finished early (so final screen does not need to check FLPNlanguage (and thus trigger question to be unnesasearily asked))
  FLPN_cutshort = False
  
  if(len(FLPNeligibleEntries) > 0):
    for entry in FLPN2_lawyerlist:
      # Check whether user said they need a non-English speaking lawyer, and that this lawyer candidate said they do not speak more than one language.
      if (FLPNlanguage == True) and (entry["language"] == False):
        entry["eligible"] = False
  else:
    FLPN_cutshort = True
  
  # remove entires flagged as "eligible"=false (after language choice selected)
  purgeIneligible()

  
  #signal that this block gathers FLPNeligibleEntries
  FLPNeligibleEntries.gathered = True
  
  if(len(FLPNeligibleEntries)>0):
    #go to final screen
    endpoints['final_screen']
  else:
    endpoints['none_eligible']
  
  menu_items = [ action_menu_item('Roadmap', 'road_map') ]
---